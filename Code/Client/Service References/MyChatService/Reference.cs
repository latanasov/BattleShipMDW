//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.MyChatService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="MyBattleshipContract", ConfigurationName="MyChatService.IBattleship", CallbackContract=typeof(Client.MyChatService.IBattleshipCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IBattleship {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyBattleshipContract/IBattleship/RegisterBattleshipClient")]
        void RegisterBattleshipClient(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyBattleshipContract/IBattleship/Shoot")]
        void Shoot(System.Drawing.Point target);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyBattleshipContract/IBattleship/ReadyForBattle")]
        void ReadyForBattle();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyBattleshipContract/IBattleship/SendHitResult")]
        void SendHitResult(bool result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyBattleshipContract/IBattleship/GameEnded")]
        void GameEnded();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBattleshipCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyBattleshipContract/IBattleship/StartGame")]
        void StartGame(int StartingPosition);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyBattleshipContract/IBattleship/PlaceShips")]
        void PlaceShips();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyBattleshipContract/IBattleship/ReceiveHit")]
        void ReceiveHit(System.Drawing.Point target);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyBattleshipContract/IBattleship/ReceiveHitResult")]
        void ReceiveHitResult(bool result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyBattleshipContract/IBattleship/EnemyReady")]
        void EnemyReady();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyBattleshipContract/IBattleship/ReceiveGameEnd")]
        void ReceiveGameEnd();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBattleshipChannel : Client.MyChatService.IBattleship, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BattleshipClient : System.ServiceModel.DuplexClientBase<Client.MyChatService.IBattleship>, Client.MyChatService.IBattleship {
        
        public BattleshipClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public BattleshipClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public BattleshipClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BattleshipClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BattleshipClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterBattleshipClient(string playerName) {
            base.Channel.RegisterBattleshipClient(playerName);
        }
        
        public void Shoot(System.Drawing.Point target) {
            base.Channel.Shoot(target);
        }
        
        public void ReadyForBattle() {
            base.Channel.ReadyForBattle();
        }
        
        public void SendHitResult(bool result) {
            base.Channel.SendHitResult(result);
        }
        
        public void GameEnded() {
            base.Channel.GameEnded();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="MyChatContract", ConfigurationName="MyChatService.IChat", CallbackContract=typeof(Client.MyChatService.IChatCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyChatContract/IChat/SendMessage")]
        void SendMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyChatContract/IChat/RegisterChatRoom")]
        void RegisterChatRoom(string playername);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyChatContract/IChat/SendLobbyMessage")]
        void SendLobbyMessage(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyChatContract/IChat/ReceiveMessage")]
        void ReceiveMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyChatContract/IChat/ReceiveLobbyMessage")]
        void ReceiveLobbyMessage(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatChannel : Client.MyChatService.IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.DuplexClientBase<Client.MyChatService.IChat>, Client.MyChatService.IChat {
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(string message) {
            base.Channel.SendMessage(message);
        }
        
        public void RegisterChatRoom(string playername) {
            base.Channel.RegisterChatRoom(playername);
        }
        
        public void SendLobbyMessage(string message) {
            base.Channel.SendLobbyMessage(message);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="MyLobbyContract", ConfigurationName="MyChatService.ILobby", CallbackContract=typeof(Client.MyChatService.ILobbyCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ILobby {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyLobbyContract/ILobby/logPlayer")]
        void logPlayer(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyLobbyContract/ILobby/invitePlayer")]
        void invitePlayer(string invitedFrom, [System.ServiceModel.MessageParameterAttribute(Name="InvitePlayer")] string InvitePlayer1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyLobbyContract/ILobby/acceptInvitationInvokeGame")]
        void acceptInvitationInvokeGame(string player1, string player2);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyLobbyContract/ILobby/declineInvitation")]
        void declineInvitation(string invitedFrom);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyLobbyContract/ILobby/RandomGame")]
        void RandomGame(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyLobbyContract/ILobby/logOut")]
        void logOut(string playerName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyLobbyContract/ILobby/receiveAvailablePlayers")]
        void receiveAvailablePlayers(string[] AvailablePlayers);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyLobbyContract/ILobby/notifyPlayerInvitationResult")]
        void notifyPlayerInvitationResult(bool acceptOrDecline);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyLobbyContract/ILobby/notifyPlayerInvitation")]
        void notifyPlayerInvitation(string invitedFrom);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyLobbyContract/ILobby/receiveLoginResult")]
        void receiveLoginResult(bool result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyChannel : Client.MyChatService.ILobby, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyClient : System.ServiceModel.DuplexClientBase<Client.MyChatService.ILobby>, Client.MyChatService.ILobby {
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void logPlayer(string name) {
            base.Channel.logPlayer(name);
        }
        
        public void invitePlayer(string invitedFrom, string InvitePlayer1) {
            base.Channel.invitePlayer(invitedFrom, InvitePlayer1);
        }
        
        public void acceptInvitationInvokeGame(string player1, string player2) {
            base.Channel.acceptInvitationInvokeGame(player1, player2);
        }
        
        public void declineInvitation(string invitedFrom) {
            base.Channel.declineInvitation(invitedFrom);
        }
        
        public void RandomGame(string playerName) {
            base.Channel.RandomGame(playerName);
        }
        
        public void logOut(string playerName) {
            base.Channel.logOut(playerName);
        }
    }
}
